{"version":3,"sources":["pages/Register/index.js"],"names":["Registration","state","confirmDirty","autoCompleteResult","handleSubmit","e","preventDefault","_this","props","form","validateFieldsAndScroll","err","values","console","log","handleConfirmBlur","value","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","getFieldDecorator","this","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","antd__WEBPACK_IMPORTED_MODULE_7__","className","onSubmit","Item","rules","type","message","required","antd__WEBPACK_IMPORTED_MODULE_8__","placeholder","validator","onBlur","wrapperCol","xs","span","offset","sm","antd__WEBPACK_IMPORTED_MODULE_9__","htmlType","Component","WrappedNormalRegisterForm","Form","create","name","connect","dispatch"],"mappings":"kMAMMA,6MACJC,MAAQ,CACNC,cAAc,EACdC,mBAAoB,MAGtBC,aAAe,SAACC,GACdA,EAAEC,iBACFC,EAAKC,MAAMC,KAAKC,wBAAwB,SAACC,EAAKC,GACvCD,GACHE,QAAQC,IAAI,4BAA6BF,QAK/CG,kBAAoB,SAACV,GACnB,IAAMW,EAAQX,EAAEY,OAAOD,MACvBT,EAAKW,SAAS,CAAEhB,aAAcK,EAAKN,MAAMC,gBAAkBc,OAG7DG,uBAAyB,SAACC,EAAMJ,EAAOK,GACrC,IAAMZ,EAAOF,EAAKC,MAAMC,KACpBO,GAASA,IAAUP,EAAKa,cAAc,YACxCD,EAAS,iDAETA,OAIJE,uBAAyB,SAACH,EAAMJ,EAAOK,GACrC,IAAMZ,EAAOF,EAAKC,MAAMC,KACpBO,GAAST,EAAKN,MAAMC,cACtBO,EAAKe,eAAe,CAAC,WAAY,CAAEC,OAAO,IAE5CJ,6EAGO,IACCK,EAAsBC,KAAKnB,MAAMC,KAAjCiB,kBAcR,OACEE,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,UAAU,gBAAiBC,SAAUN,KAAKvB,cAC9CwB,EAAAC,EAAAC,cAACC,EAAA,EAAKG,KAAN,KACGR,EAAkB,QAAS,CAC1BS,MAAO,CAAC,CACNC,KAAM,QAASC,QAAS,kCACvB,CACDC,UAAU,EAAMD,QAAS,+BAJ5BX,CAOCE,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOC,YAAY,aAGvBZ,EAAAC,EAAAC,cAACC,EAAA,EAAKG,KAAN,KACGR,EAAkB,WAAY,CAC7BS,MAAO,CAAC,CACNG,UAAU,EAAMD,QAAS,+BACxB,CACDI,UAAWd,KAAKJ,0BAJnBG,CAOCE,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOH,KAAK,WAAWI,YAAY,eAGvCZ,EAAAC,EAAAC,cAACC,EAAA,EAAKG,KAAN,KACGR,EAAkB,UAAW,CAC5BS,MAAO,CAAC,CACNG,UAAU,EAAMD,QAAS,iCACxB,CACDI,UAAWd,KAAKR,0BAJnBO,CAOCE,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOH,KAAK,WAAWI,YAAY,mBAAmBE,OAAQf,KAAKZ,sBAGvEa,EAAAC,EAAAC,cAACC,EAAA,EAAKG,KAhDiB,CACzBS,WAAY,CACVC,GAAI,CACFC,KAAM,GACNC,OAAQ,GAEVC,GAAI,CACFF,KAAM,GACNC,OAAQ,KAyCRlB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAQZ,KAAK,UAAUa,SAAS,UAAhC,qBAxFiBC,aAgGrBC,EAA4BC,IAAKC,OAAO,CAAEC,KAAM,YAApBF,CAAkCpD,GAerDuD,sBAbf,SAAyBtD,GACvB,MAAO,IAKT,SAA4BuD,GAC1B,MAAO,IAMMD,CAGbJ","file":"static/js/16.29a5bb23.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport {\r\n  Form, Input, Button,\r\n} from 'antd';\r\n\r\nclass Registration extends Component {\r\n  state = {\r\n    confirmDirty: false,\r\n    autoCompleteResult: [],\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.form.validateFieldsAndScroll((err, values) => {\r\n      if (!err) {\r\n        console.log('Received values of form: ', values);\r\n      }\r\n    });\r\n  }\r\n\r\n  handleConfirmBlur = (e) => {\r\n    const value = e.target.value;\r\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\r\n  }\r\n\r\n  compareToFirstPassword = (rule, value, callback) => {\r\n    const form = this.props.form;\r\n    if (value && value !== form.getFieldValue('password')) {\r\n      callback('Two passwords that you enter is inconsistent!');\r\n    } else {\r\n      callback();\r\n    }\r\n  }\r\n\r\n  validateToNextPassword = (rule, value, callback) => {\r\n    const form = this.props.form;\r\n    if (value && this.state.confirmDirty) {\r\n      form.validateFields(['confirm'], { force: true });\r\n    }\r\n    callback();\r\n  }\r\n\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form;\r\n    const tailFormItemLayout = {\r\n      wrapperCol: {\r\n        xs: {\r\n          span: 24,\r\n          offset: 0,\r\n        },\r\n        sm: {\r\n          span: 16,\r\n          offset: 9,\r\n        },\r\n      },\r\n    };\r\n\r\n    return (\r\n      <Form className=\"register-form\"  onSubmit={this.handleSubmit}>\r\n        <Form.Item>\r\n          {getFieldDecorator('email', {\r\n            rules: [{\r\n              type: 'email', message: 'The input is not valid E-mail!',\r\n            }, {\r\n              required: true, message: 'Please input your E-mail!',\r\n            }],\r\n          })(\r\n            <Input placeholder=\"E-mail\"/>\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item>\r\n          {getFieldDecorator('password', {\r\n            rules: [{\r\n              required: true, message: 'Please input your password!',\r\n            }, {\r\n              validator: this.validateToNextPassword,\r\n            }],\r\n          })(\r\n            <Input type=\"password\" placeholder=\"Password\" />\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item>\r\n          {getFieldDecorator('confirm', {\r\n            rules: [{\r\n              required: true, message: 'Please confirm your password!',\r\n            }, {\r\n              validator: this.compareToFirstPassword,\r\n            }],\r\n          })(\r\n            <Input type=\"password\" placeholder=\"Confirm Password\" onBlur={this.handleConfirmBlur} />\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item {...tailFormItemLayout}>\r\n          <Button type=\"primary\" htmlType=\"submit\">Register</Button>\r\n        </Form.Item>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst WrappedNormalRegisterForm = Form.create({ name: 'register' })(Registration);\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n\r\n  };\r\n}\r\n\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(WrappedNormalRegisterForm);\r\n"],"sourceRoot":""}